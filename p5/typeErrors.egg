int i;
bool b;
struct S{ int x; int y;};
struct P{ int x; int y;};
struct S s;
int f(){}
int p(){}
int f1(int i){}

void fi(int i){}
void fii(int i1, int i2){}
void fib(int i, bool b){}
void fbi(bool b, int i){}
void fbb(bool b, bool i){}


void test_write(){
    cout << f;      
    cout << S;      
    cout << s;      
    cout << fi(i);    
}

// Read
void test_read(){
    cin >> f;      
    cin >> S;  
    cin >> s ;   
}

// Function calls
void test_function_call(){

    // Attempt to call a non-function
    i();    
    b();    
    S(); 
    s();     
    // Function call with wrong input
    f(b, i);           
    f(i);               
    fi(i, i);          
    fi();              
    fii(i, i, i, i, i); 
    // test with right arg input
    f();
    fi(i);
    fii(i,i);
    // Type of actual does not match type of formal
    fib(b, i); 
    fib(i, i); 
    fii(b, b); 
    fbb(i, i);
}

// function return
int fn1(){ return b; }     
int fn2(){ return; }       

bool fb1(){ return i; }   
bool fb2(){ return; }

void fv1(){ return i; }       
void fv4(){ return ; }       
void fv2(){ return b; }      
void fv3(){ return i + b; }   
void fv5(){ return i(); }    
void fv6(){ return b || i; }  

// arithmetic
void test_arithmetic() {
    i = i + b;
    i = i * b;
    i = i / b;
    i = i - b;
    i = b + i;
    i = b * i;
    i = b / i;
    i = b - i;
    b++;
    b--;

    i = i + s;
    i = i * s;
    i = i / s;
    i = i - s;
    i = s + i;
    i = s * i;
    i = s / i;
    i = s - i;
    s++;
    s--;

    i = S + i;
    i = S * i;
    i = S / i;
    i = S - i;
    i = S + S;
    i = S * S;
    i = S / S;
    i = S - S;
    S++;
    S--;

    i = i + f;
    i = i * f;
    i = i / f;
    i = i - f;
    i = f + i;
    i = f * i;
    i = f / i;
    i = f - i;
    f++;
    f--;
}

// logical
void test_logical() {
    // Logical operator applied to non-bool operand
    b = !i;    

    b = i && b; 
    b = b && i;
    b = i && i; 

    b = i || b;  
    b = b || i;  
    b = i || i;  
    b = !s;     

    b = s && b;  
    b = b && s; 
    b = s && s;  

    b = s || b;  
    b = b || s;  
    b = s || s; 
    b = !s;       

    b = s && b;   
    b = b && s;     
    b = s && s;     

    b = s || b;    
    b = b || s;     
    b = s || s;     




    b = !f;    

    b = f && b;  
    b = b && f;  
    b = f && f;  

    b = f || b; 
    b = b || f;  
    b = f || f;  
}


// relational
void test_relational() {
    // Relational operator applied to non-numeric operand
    b = i < b; 
    b = i > b;  
    b = i >= b; 
    b = i <= b; 
    b = b < i;  
    b = b > i;  
    b = b >= i;
    b = b <= i; 

    b = s < b;  
    b = s > b;  
    b = s >= b; 
    b = s <= b;
    b = b < s;  
    b = b > s; 
    b = b >= s; 
    b = b <= s; 

    b = S < b;  
    b = S > b;  
    b = S >= b; 
    b = S <= b; 
    b = b < S; 
    b = b > S;  
    b = b <= S; 

    b = f < b;  
    b = f > b;  
    b = f <= b; 
    b = b > f;  
    b = b <= f; 
}


// if 
void test_if() {
    if(i) { i = i; } 
    if(S) { i = i; }
    if(s) { i = i; } 
    if(f) { i = i; } 
}


// while
void test_while() {
    while(i) { i = i; } 
    while(S) { i = i; } 
    while(s) { i = i; } 
    while(f) { i = i; } 
}


// repeat
void test_repeat() {
    repeat(b) { i = i; }
    repeat(s) { i = i; } 
    repeat(S) { i = i; }
    repeat(f) { i = i; } 
}

// type mismatch
void test_type_mismatch() {
    i = b;  

    b = b == i;        
    b = i == b;       
    i = ((b == i) == b);

	f = b;  
    b = f;  

    b = b == f;
    b = f == b;          
    f = ((b == f) == b); 

	
    
    s = b; 

    b = b == s;         
    s = ((b == s) == b); 
    
    S = b; 
    b = s; 

    b = b == S;    
    b = S == b;     
    S = ((b == S) == b); 
}

// Equality operator 
void test_equality_operator() {
    b = fi(i) == fii(i, i); 
    b = fi == fii;          
    b = S == S;              
    b = s == s;             
}

// Assignment
void test_assignment() {
    fi = fii;  
    S = S;    
    s = s;     
}


void main(){
    cout << P + 1;              // P + 1 is an error; the write is OK
    i = (true + 3) * 4;         // true + 3 is an error; the * is OK
    i = true && (false || 3);   // false || 3 is an error; the && is OK
    fi("a" * 4);                // "a" * 4 is an error; the call is OK
    i = 1 + p();                // p() is an error; the + is OK
    b = (true + 3) == i;        // true + 3 is an error; the == is OK
                                // regardless of the type of x


    i = true + "hello";      // one error for each of the non-int operands of the +
    i = 1 + f1(true);        // one for the bad arg type and one for the 2nd operand of the +
    i = 1 + fi(1, 2);        // one for the wrong number of args and one for the 2nd operand of the +
    return 3+true;           // in a void function: one error for the 2nd operand to +
                             // and one for returning a value

}
