int x;                     //
int x;                     // Multiply declared identifier
bool x;                    // Multiply declared identifier
int x() {}                 // Multiply declared identifier
struct x {                 // Multiply declared identifier
  int x;                   //
};                               //
int x() {}                 // Multiply declared identifier
int mul_func() {}                //
int mul_func() {}                // Multiply declared identifier
int mul_formal(int a, int a) {}  // Multiply declared identifier
struct mul_struct {              //
  int x;                   //
  int x;                   // Multiply declared identifier
  bool x;                  // Multiply declared identifier
  void x;  // Multiply declared identifier + Non-function declared void
};               //
struct mul_struct {  // Multiply declared identifier
  int x;       //
  bool x;      // Multiply declared identifier
};                   //


int test() {
  // undeclared var
    int x;       //
  int x;       // Multiply declared identifier
  int a;             //
  int a;             // Multiply declared identifier

  // undeclared func
  undec_func();                          // Undeclared identifier
  a = undec_func(a);                     // Undeclared identifier
  undec_func(undec_func(undec_func()));  // Undeclared identifier * 3
}


int test_dot_access() {
  a = a.b;      // Dot-access of non-struct type

  a = func.a;   // Dot-access of non-struct type
}

// Non-function declared void

void void_var;                    // Non-function declared void
void x;                     // Non-function declared void
                                  // Multiply declared identifier
struct void_struct {              //
  void x;                   // Non-function declared void
};                                //
int void_formal(void void_var) {  // Non-function declared void
  void a;                         // Non-function declared void
  void a;                         // Non-function declared void
                                  // Multiply declared identifier
}

